diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
new file mode 100644
index 0000000..3bc9175
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
@@ -0,0 +1,52 @@
+
+/*
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderH
+ */
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wreturn-type-c-linkage"
+
+#import <React/RCTComponentViewProtocol.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name);
+#if RCT_NEW_ARCH_ENABLED
+#ifndef RCT_DYNAMIC_FRAMEWORKS
+
+
+Class<RCTComponentViewProtocol> RNGestureHandlerButtonCls(void) __attribute__((used)); // 1
+Class<RCTComponentViewProtocol> RNGestureHandlerRootViewCls(void) __attribute__((used)); // 1
+Class<RCTComponentViewProtocol> RNCSafeAreaProviderCls(void) __attribute__((used)); // 2
+Class<RCTComponentViewProtocol> RNCSafeAreaViewCls(void) __attribute__((used)); // 2
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNSFullWindowOverlayCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSModalScreenCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenContainerCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenContentWrapperCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenFooterCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenNavigationContainerCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderConfigCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderSubviewCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSScreenStackCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNSSearchBarCls(void) __attribute__((used)); // 3
+#endif
+
+
+#endif
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma GCC diagnostic pop
+
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
new file mode 100644
index 0000000..9bbd11b
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
@@ -0,0 +1,66 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderCpp
+ */
+
+// OSS-compatibility layer
+
+#import "RCTThirdPartyFabricComponentsProvider.h"
+
+#import <string>
+#import <unordered_map>
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name) {
+  static std::unordered_map<std::string, Class (*)(void)> sFabricComponentsClassMap = {
+    #if RCT_NEW_ARCH_ENABLED
+    #ifndef RCT_DYNAMIC_FRAMEWORKS
+
+
+    {"RNGestureHandlerButton", RNGestureHandlerButtonCls}, // 1
+
+    {"RNGestureHandlerRootView", RNGestureHandlerRootViewCls}, // 1
+
+    {"RNCSafeAreaProvider", RNCSafeAreaProviderCls}, // 2
+
+    {"RNCSafeAreaView", RNCSafeAreaViewCls}, // 2
+#if !TARGET_OS_OSX
+
+    {"RNSFullWindowOverlay", RNSFullWindowOverlayCls}, // 3
+
+    {"RNSModalScreen", RNSModalScreenCls}, // 3
+
+    {"RNSScreenContainer", RNSScreenContainerCls}, // 3
+
+    {"RNSScreenContentWrapper", RNSScreenContentWrapperCls}, // 3
+
+    {"RNSScreenFooter", RNSScreenFooterCls}, // 3
+
+    {"RNSScreen", RNSScreenCls}, // 3
+
+    {"RNSScreenNavigationContainer", RNSScreenNavigationContainerCls}, // 3
+
+    {"RNSScreenStackHeaderConfig", RNSScreenStackHeaderConfigCls}, // 3
+
+    {"RNSScreenStackHeaderSubview", RNSScreenStackHeaderSubviewCls}, // 3
+
+    {"RNSScreenStack", RNSScreenStackCls}, // 3
+
+    {"RNSSearchBar", RNSSearchBarCls}, // 3
+#endif
+
+    #endif
+    #endif
+  };
+
+  auto p = sFabricComponentsClassMap.find(name);
+  if (p != sFabricComponentsClassMap.end()) {
+    auto classFunc = p->second;
+    return classFunc();
+  }
+  return nil;
+}
diff --git a/node_modules/react-native/scripts/.packager.env b/node_modules/react-native/scripts/.packager.env
new file mode 100644
index 0000000..361f5fb
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.env
@@ -0,0 +1 @@
+export RCT_METRO_PORT=8081
diff --git a/node_modules/react-native/scripts/react-native-xcode.sh b/node_modules/react-native/scripts/react-native-xcode.sh
index 001b6cb..f4c50be 100755
--- a/node_modules/react-native/scripts/react-native-xcode.sh
+++ b/node_modules/react-native/scripts/react-native-xcode.sh
@@ -24,7 +24,7 @@ if [[ ! "$SKIP_BUNDLING_METRO_IP" && "$CONFIGURATION" = *Debug* && ! "$PLATFORM_
     IP=$(ifconfig | grep 'inet ' | grep -v ' 127.' | grep -v ' 169.254.' |cut -d\   -f2  | awk 'NR==1{print $1}')
   fi
 
-  echo "$IP" > "$DEST/ip.txt"
+  echo "$IP" > "/tmp/ip.txt"
 fi
 
 if [[ "$SKIP_BUNDLING" ]]; then
